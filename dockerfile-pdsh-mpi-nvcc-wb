# Dockerfile
# Specify an ML Runtime base image
FROM docker.repository.cloudera.com/cloudera/cdsw/ml-runtime-pbj-workbench-python3.10-cuda:2023.08.2-b8
# Install necessary cuda-toolkit packages
RUN \
    # Update nvidia GPG key
    rm /etc/apt/sources.list.d/cuda.list && \
    apt-key del 7fa2af80 && \
    apt-get update && apt-get install -y --no-install-recommends wget && \
    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb && \
    dpkg -i cuda-keyring_1.0-1_all.deb && \
    apt-get update
#RUN apt-get install -y cuda-toolkit-12-2
RUN apt-get install -y libcusparse-dev-12-2
RUN apt-get install -y libcublas-dev-12-2
RUN apt-get install -y libcusolver-dev-12-2
RUN apt-get install -y libcurand-dev-12-2
RUN apt-get install -y libaio-dev
RUN apt-get install -y libcufft-12-2
RUN apt-get install -y libcufft-dev-12-2
RUN apt-get install -y pdsh
RUN apt-get install -y cuda-nvrtc-12-2
RUN apt-get install -y cuda-nvrtc-dev-12-2
RUN apt-get install -y cuda-nvcc-12-2
RUN apt-get install -y cuda-nvtx-12-2 && apt-get clean && rm -rf /var/lib/apt/lists/*
ENV ML_RUNTIME_EDITION="openmpi_pdsh_nvcc_wb" \
       	ML_RUNTIME_SHORT_VERSION="2024.Jan.2" \
        ML_RUNTIME_MAINTENANCE_VERSION=1 \
        ML_RUNTIME_DESCRIPTION="openMPI5.0.1, nvcc12.2"
ENV ML_RUNTIME_FULL_VERSION="${ML_RUNTIME_SHORT_VERSION}.${ML_RUNTIME_MAINTENANCE_VERSION}"
LABEL com.cloudera.ml.runtime.edition=$ML_RUNTIME_EDITION \
        com.cloudera.ml.runtime.full-version=$ML_RUNTIME_FULL_VERSION \
        com.cloudera.ml.runtime.short-version=$ML_RUNTIME_SHORT_VERSION \
        com.cloudera.ml.runtime.maintenance-version=$ML_RUNTIME_MAINTENANCE_VERSION \
        com.cloudera.ml.runtime.description=$ML_RUNTIME_DESCRIPTION

RUN wget https://download.open-mpi.org/release/open-mpi/v5.0/openmpi-5.0.1.tar.gz
RUN tar xzvf openmpi-5.0.1.tar.gz
WORKDIR openmpi-5.0.1
RUN ./configure
RUN make -j4
RUN make install
RUN ldconfig
RUN which mpicc
RUN mpicc -show
RUN which mpiexec
RUN mpiexec --version
WORKDIR /home/
RUN mkdir OpenMpi
WORKDIR /home/OpenMPi
RUN wget http://www.open-mpi.org/papers/workshop-2006/hello.c
RUN mpicc hello.c -o hello

# Configure SSHD.
# SSH login fix. Otherwise user is kicked off after login
RUN apt-get install -y openssh-server
RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd
RUN mkdir /var/run/sshd
RUN bash -c 'install -m755 <(printf "#!/bin/sh\nexit 0") /usr/sbin/policy-rc.d'
RUN RUNLEVEL=1 dpkg-reconfigure openssh-server
RUN ssh-keygen -A -v
RUN update-rc.d ssh defaults
RUN echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config

USER cdsw
RUN ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519
RUN cat ~/.ssh/id_ed25519
RUN cp ~/.ssh/id_ed25519.pub /home/cdsw/.ssh/authorized_keys
RUN chmod 700 /home/cdsw/.ssh/authorized_keys
RUN chown cdsw:cdsw /home/cdsw/.ssh/authorized_keys

# Setup default command and/or parameters.
EXPOSE 22
CMD ["/usr/bin/sudo", "/usr/sbin/sshd", "-D", "-o", "ListenAddress=0.0.0.0"]
